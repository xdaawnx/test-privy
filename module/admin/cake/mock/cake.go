// Code generated by MockGen. DO NOT EDIT.
// Source: model.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	constant "test-privy/helper/constant"
	cake "test-privy/module/admin/cake"
)

// MockCakeModel is a mock of CakeModel interface.
type MockCakeModel struct {
	ctrl     *gomock.Controller
	recorder *MockCakeModelMockRecorder
}

// MockCakeModelMockRecorder is the mock recorder for MockCakeModel.
type MockCakeModelMockRecorder struct {
	mock *MockCakeModel
}

// NewMockCakeModel creates a new mock instance.
func NewMockCakeModel(ctrl *gomock.Controller) *MockCakeModel {
	mock := &MockCakeModel{ctrl: ctrl}
	mock.recorder = &MockCakeModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCakeModel) EXPECT() *MockCakeModelMockRecorder {
	return m.recorder
}

// CakeCreate mocks base method.
func (m *MockCakeModel) CakeCreate(arg0 *cake.CreateCakeReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CakeCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CakeCreate indicates an expected call of CakeCreate.
func (mr *MockCakeModelMockRecorder) CakeCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CakeCreate", reflect.TypeOf((*MockCakeModel)(nil).CakeCreate), arg0)
}

// CakeDelete mocks base method.
func (m *MockCakeModel) CakeDelete(arg0 cake.DetailCakeReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CakeDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CakeDelete indicates an expected call of CakeDelete.
func (mr *MockCakeModelMockRecorder) CakeDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CakeDelete", reflect.TypeOf((*MockCakeModel)(nil).CakeDelete), arg0)
}

// CakeDetail mocks base method.
func (m *MockCakeModel) CakeDetail(arg0 cake.DetailCakeReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CakeDetail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CakeDetail indicates an expected call of CakeDetail.
func (mr *MockCakeModelMockRecorder) CakeDetail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CakeDetail", reflect.TypeOf((*MockCakeModel)(nil).CakeDetail), arg0)
}

// CakeList mocks base method.
func (m *MockCakeModel) CakeList(arg0 *constant.Params) (*constant.DataPaging, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CakeList", arg0)
	ret0, _ := ret[0].(*constant.DataPaging)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CakeList indicates an expected call of CakeList.
func (mr *MockCakeModelMockRecorder) CakeList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CakeList", reflect.TypeOf((*MockCakeModel)(nil).CakeList), arg0)
}

// CakeUpdate mocks base method.
func (m *MockCakeModel) CakeUpdate(arg0 *cake.UpdateCakeReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CakeUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CakeUpdate indicates an expected call of CakeUpdate.
func (mr *MockCakeModelMockRecorder) CakeUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CakeUpdate", reflect.TypeOf((*MockCakeModel)(nil).CakeUpdate), arg0)
}

// TestModel mocks base method.
func (m *MockCakeModel) TestModel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestModel")
	ret0, _ := ret[0].(error)
	return ret0
}

// TestModel indicates an expected call of TestModel.
func (mr *MockCakeModelMockRecorder) TestModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestModel", reflect.TypeOf((*MockCakeModel)(nil).TestModel))
}
